doctype html
head
	meta(charset="UTF-8")
	meta(http-equiv="X-UA-Compatible" content="IE=edge")
	title KeyControl
	link(rel="icon" href="logo.png" type="image/png")
	link(rel="stylesheet" href="style.css")
	script(type="text/javascript" src="script.js")
nav
	a(href="#windows") Windows
	a(href="#hotkeys") Hotkeys
	a(href="#games") Games
	a(href="#inline") Inline
	a(href="#hotstrings") Hotstrings
	div(style="margin-top:auto")
	a(href="#test") Test Area
main
	#windows
		table
			tr.title
				td Window properties
			tr
				td Always on top
				td.keycombo Ctrl+Win+T
			tr
				td Borderless
				td.keycombo Ctrl+Win+B
			tr
				td Clickthrough
				td.keycombo Ctrl+Win+H
			tr
				td Fullscreen (Borderless)
				td.keycombo Ctrl+Win+F
			tr.faded
				td Fullscreen (Maximized)
				td.keycombo Ctrl+Win+Alt+F
			tr
				td Hide window
				td.keycombo Ctrl+Win+M
			tr
				td Unhide window
				td.keycombo Ctrl+Win+N
			tr.faded
				td Transparent color
					sub(title="Doesn't work well with some windows") üõà
				td.keycombo Ctrl+Win+X


			tr.title
				td Transparency
			tr
				td Toggle transparency
				td.keycombo Ctrl+Win+Middle Click
			tr
				td Change transparency
				td.keycombo Ctrl+Win+Scrollwheel
			tr
				td
					| Change by
					sub(title="Good values are 1,3,5,15,17,51,85,255") üõà
				td: input.int(name="Windows.Alpha" min=0 max=255)


			tr.title
				td
					.checkbox(name="Windows.Move.F1")
					| Move window (F1)
			tr
				td Move window to current screen
				td.keycombo F1
			tr
				td Maximize window on move
				td: .checkbox(name="Windows.Move.Maximize")
			tr.faded
				td Normal F1
				td.keycombo Win+F1
			tr.faded
				td Using HTC Vive:#{' '}
					span.keycombo ¬£
					| #{' '}(on VR keyboard)
				td: .checkbox(name="Windows.Move.Vive")


			tr.title
				td
					.checkbox(name="Windows.Move.Mouse")
					| Move window (Mouse)
			tr
				td Drag to move
				td.keycombo Ctrl+Win+Left Mouse
			tr
				td Drag to resize
				td.keycombo Ctrl+Win+Right Mouse
	#hotkeys
		table
			tr.title
				td Hotkeys
			tr
				td Get color under cursor
				td.keycombo Ctrl+Win+C
			tr
				td Google selected text
				td.keycombo Ctrl+Win+G
			tr
				td Keep key down
					sub(title="Press this Combo, then press all the keys, that should be held down, simultaneously.\n"+
					"To cancel a pressed key, just press that key again") üõà
				td.keycombo Ctrl+Win+K
			tr
				td Break out of games (unfocus)
				td.keycombo Ctrl+Win+Pause
			tr
				td
					| Kill focused Program (Similar to
					span.keycombo Alt+F4
					| )
				td.keycombo Ctrl+Win+F4
			tr
				td Kill KeyControl
				td.keycombo Ctrl+Win+Esc


			tr.title
				td(colspan=2)
					.checkbox(name="Hotkeys.CapsLock.Enabled")
					| CapsLock remapping
			tr
				td Open Settings Menu
				td.keycombo Win+CapsLock
			tr
				td Toggle CapsLock anyways
				td.keycombo Ctrl+CapsLock | Shift+CapsLock
			tr
				td Action
				td: textarea.action(name="Hotkeys.CapsLock.Action")


			tr.title
				td
					.checkbox(name="Hotkeys.Spammer.Enabled")
					| Spammer
			tr
				td Toggle spamming
					sub(title="There is an indicator in the bottom right corner of the screen, that shows if the spammer is running") üõà
				td.keycombo  ScrollLock
			tr
				td Delay
				td: input.int(name="Hotkeys.Spammer.Delay")
			tr
				td Action
				td: textarea.action(name="Hotkeys.Spammer.Action")
			tr
				td
					| Press
					span.keycombo Return
					| afterwards
				td: .checkbox(name="Hotkeys.Spammer.Return")


			tr.title
				td Custom Action
					sub(title="Helpful for pasting text within remote desktop apps, that don't sync the clipboard.") üõà
			tr
				td Perform custom action
				td.keycombo Ctrl+Win+V
			tr
				td Action/Text
				td: textarea.action(name="Hotkeys.CustomAction.Action")
			tr
				td Paste as raw text
				td: .checkbox(name="Hotkeys.CustomAction.RawText")
	#games
		table
			tr.title
				td
					.checkbox(name="Games.ControllerAsMouse.Enabled")
					| Controller as Mouse
			tr
				td(colspan=2)
					img.controllerSvg(src="/controller.svg")
			tr
				td Custom Action for
					span.keycombo Back
				td: textarea.action(name="Games.ControllerAsMouse.Actions.Back")
			tr
				td Custom Action for
					span.keycombo Start
				td: textarea.action(name="Games.ControllerAsMouse.Actions.Home")
			tr
				td Custom Action for
					span.keycombo DPAD Up
				td: textarea.action(name="Games.ControllerAsMouse.Actions.DPadUp")
			tr
				td Custom Action for
					span.keycombo DPAD Left
				td: textarea.action(name="Games.ControllerAsMouse.Actions.DPadLeft")
			tr
				td Custom Action for
					span.keycombo DPAD Down
				td: textarea.action(name="Games.ControllerAsMouse.Actions.DPadDown")
			tr
				td Custom Action for
					span.keycombo DPAD Right
				td: textarea.action(name="Games.ControllerAsMouse.Actions.DPadRight")


			tr.title
				td
					.checkbox(name="Games.CrossHair.Enabled")
					| CrossHair
			tr
				td Toggle CrossHair
				td.keycombo Ctrl+Win+S
			tr
				td Line color
				td: input.color(name="Games.CrossHair.Color")
			tr
				td Line length
				td: input.int(name="Games.CrossHair.Length")
			tr
				td Line thickness
				td: input.int(name="Games.CrossHair.Thickness")
			tr
				td Line gap
				td: input.int(name="Games.CrossHair.Gap")
			tr
				td Center dot
				td: .checkbox(name="Games.CrossHair.Dot")


			tr.title
				td(colspan=2)
					| Rotate WASD (Challenge)
					button#rotateWasd OFF
			tr
				td Direction
				td
					table.rotateWasd
						tr
							td: .box(value=7)
							td: .box(value=0)
							td: .box(value=1)
						tr
							td: .box(value=6)
							td
							td: .box(value=2)
						tr
							td: .box(value=5)
							td: .box(value=4)
							td: .box(value=3)
	#inline
		table
			tr.title
				td
					.checkbox(name="Calculate.NumLock")
					| Calculate
			tr
				td Calculate selected text
				td.keycombo NumLock
			tr
				td Toggle NumLock anyways
				td.keycombo Ctrl+NumLock | Shift+NumLock
			tr
				td Hotstring
				td
					span.hotstring
						| @=
						i expression
						| ‚èé
			tr
				td Calculate now
				td
					textarea(name="Internal.Calculate.Expression")
					textarea(readonly name="Internal.Calculate.Result")


			tr.title
				td Flip upside-down
			tr
				td Hotstring
				td
					span.hotstring
						| @flip#{' '}
						i text
						| ‚èé
			tr
				td Flip now
				td
					textarea(name="Internal.Flip.A")
					textarea(name="Internal.Flip.B")

			tr.title
				td Unicode
			tr
				td Hotstring
				td
					span.hotstring
						| @u
						i code
						| ‚èé
			tr
				td Convert now (\u???? ‚áå ÔøΩ)
				td
					textarea(name="Internal.Unicode.A")
					textarea(name="Internal.Unicode.B")
	#hotstrings
	#test
		textarea
		div
			| Length: 0